/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opendbx.functions;
import core.stdc.config;

private
{
    import derelict.opendbx.types;
}

extern(C) nothrow
{
    // api.h
	alias int function(odbx_t** handle, const char* backend, const char* host, const char* port) da_odbx_init;
	alias int function(odbx_t* handle, const char* database, const char* who, const char* cred, int method) da_odbx_bind;
	alias int function(odbx_t* handle) da_odbx_unbind;
	alias int function(odbx_t* handle) da_odbx_finish;
	alias int function(odbx_t* handle, uint cap) da_odbx_capabilities;
	alias int function(odbx_t* handle, uint option, void* value) da_odbx_get_option;
	alias int function(odbx_t* handle, uint option, void* value) da_odbx_set_option;
	alias char* function(odbx_t* handle, int error) da_odbx_error;
	alias int function(odbx_t* handle, int error) da_odbx_error_type;
	alias int function(odbx_t* handle, const char* from, c_ulong fromlen, char* to, c_ulong* tolen) da_odbx_escape;
	alias int function(odbx_t* handle, const char* query, c_ulong length) da_odbx_query;
	alias int function(odbx_t* handle, odbx_result_t** result, timeval* timeout, c_ulong chunk) da_odbx_result;
	alias int function(odbx_result_t* result) da_odbx_result_finish;
	alias int function(odbx_result_t* result) da_odbx_row_fetch;
	alias uint64_t function(odbx_result_t* result) da_odbx_rows_affected;
	alias c_ulong function(odbx_result_t* result) da_odbx_column_count;
	alias char* function(odbx_result_t* result, c_ulong pos) da_odbx_column_name;
	alias int function(odbx_result_t* result, c_ulong pos) da_odbx_column_type;
	alias c_ulong function(odbx_result_t* result, c_ulong pos) da_odbx_field_length;
	alias char* function(odbx_result_t* result, c_ulong pos) da_odbx_field_value;
	
	//odbxdrv.h
	//alias void function(odbx_ops** ops) da_odbxdrv_register;
	
	//odbxlib.h
	alias int function(odbx_t* handle, const char* backend) da__odbx_lib_open;
	alias int function(odbx_t* handle) da__odbx_lib_close;
}

__gshared
{
	da_odbx_init odbx_init;
	da_odbx_bind odbx_bind;
	da_odbx_unbind odbx_unbind;
	da_odbx_finish odbx_finish;
	da_odbx_capabilities odbx_capabilities;
	da_odbx_get_option odbx_get_option;
	da_odbx_set_option odbx_set_option;
	da_odbx_error odbx_error;
	da_odbx_error_type odbx_error_type;
	da_odbx_escape odbx_escape;
	da_odbx_query odbx_query;
	da_odbx_result odbx_result;
	da_odbx_result_finish odbx_result_finish;
	da_odbx_row_fetch odbx_row_fetch;
	da_odbx_rows_affected odbx_rows_affected;
	da_odbx_column_count odbx_column_count;
	da_odbx_column_name odbx_column_name;
	da_odbx_column_type odbx_column_type;
	da_odbx_field_length odbx_field_length;
	da_odbx_field_value odbx_field_value;

	//da_odbxdrv_register odbxdrv_register;

	da__odbx_lib_open _odbx_lib_open;
	da__odbx_lib_close _odbx_lib_close;
}
